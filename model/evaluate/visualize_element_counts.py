import matplotlib.pyplot as plt
from collections import Counter
from keras.models import load_model


def truncate_labels(labels, max_words=20):
    truncated = []
    for label in labels:
        if len(label) > max_words:
            truncated_label = ' '.join(label[:max_words]) + '...'
        else:
            truncated_label = label
        truncated.append(truncated_label)
    return truncated
def unique(list1):
    unique_list = []

    for x in list1:
        if x not in unique_list:
            unique_list.append(x)
    return unique_list

with open('result_files/tokenized_code.txt', 'r', encoding='utf-8') as file:
    tokenized_lines = file.readlines()
token_types = [token.split(':')[0] for token in tokenized_lines]
token_counts = Counter(token_types)
token_types = unique(token_types)

# labels = ['Constant', 'alias', 'FunctionDef', 'Name', 'Attribute', 'ImportFrom', 'ExceptHandler', 'ClassDef', 'arg', 'keyword', 'ASGI config for Diploma_work project.\n', '\n', 'It exposes the ASGI callable as a module-level variable named ``application``.\n', 'For more information on this file, see\n', 'https', 'Django settings for Diploma_work project.\n', "Generated by 'django-admin startproject' using Django 3.1.5.\n", 'For the full list of settings and their values, see\n', 'The `urlpatterns` list routes URLs to views. For more information please see', '    https', 'Examples', 'Function views\n', '    1. Add an import', '    2. Add a URL to urlpatterns', 'Class-based views\n', 'Including another URLconf\n', '    1. Import the include() function', 'WSGI config for Diploma_work project.\n', 'It exposes the WSGI callable as a module-level variable named ``application``.\n']
formatted_labels = truncate_labels(token_counts.keys(), max_words=20)





frequency_counts = token_counts
total_tokens = sum(frequency_counts.values())
frequencies = {token: count / total_tokens for token, count in frequency_counts.items()}

sorted_tokens = sorted(frequencies.items(), key=lambda item: item[1], reverse=True)

tokens, freqs = zip(*sorted_tokens)





plt.figure(figsize=(12, 8))
plt.bar(tokens,   freqs, color='green')
plt.title('Token Type Frequency')
plt.ylabel('Frequency')
plt.xlabel('Token Type')
plt.xticks(range(len(tokens)), formatted_labels,rotation=90)
plt.tight_layout()
plt.savefig('result_files/token_frequency_chart.png')
plt.show()
